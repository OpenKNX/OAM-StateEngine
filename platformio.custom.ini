
[RP2040_FLASH]
build_flags =
  ; special for DFA
  -D KNX_FLASH_OFFSET=0xDC000
  -D KNX_FLASH_SIZE=0x20000
  ; regular
  -D OPENKNX_FLASH_SIZE=0x4000
  -D OPENKNX_FLASH_OFFSET=0xFC000

; ======== architecture independent ========
[custom]
build_flags =
  ; ${KNX_TP.build_flags}

[custom_develop]
extends = custom
build_flags =
  ${custom.build_flags}
  -D OPENKNX_HEARTBEAT
  -D OPENKNX_RUNTIME_STAT
; TODO check removal (default now)
debug_build_flags = -ggdb3

[custom_releases]
extends = custom
build_flags =
  ${custom.build_flags}

; ======== RP2040 ========
[RP2040_custom]
extends = RP2040
build_flags =
  -D SERIAL_DEBUG=Serial
  -Wunused-variable


; this config block is for specifying options that are valid for all RP2040-based develop/debug builds
[RP2040_custom_develop]
extends = RP2040_develop, RP2040_custom, custom_develop
build_flags = 
  ${RP2040_develop.build_flags}
  ${RP2040_custom.build_flags}
  ${custom_develop.build_flags}
  ${KNX_TP.build_flags}
debug_build_flags = 
  ${custom_develop.debug_build_flags}
  -O0 

; this config block is for specifying options that are valid for all RP2040-based release builds
[RP2040_custom_releases]
extends = RP2040_releases, RP2040_custom, custom
build_flags = 
  ${RP2040_releases.build_flags}
  ${RP2040_custom.build_flags}
  ${custom.build_flags}
  ${KNX_TP.build_flags}
  -O0
  

[env:develop_RP2040]
extends = RP2040_custom_develop, RP2040_2MB
build_flags =
  ${RP2040_custom_develop.build_flags}
  ; -D BOARD_SMARTMF_1TE_RP2040
  ; -D BOARD_MASIFI_V40
  ; -D OKNXHW_REG1_BASE_V1
  ; -D OKNXHW_REG1_CONTROLLER2040
  ; replace -D OKNXHW_PIPICO_BCU_CONNECTOR
  -D DEVICE_PIPICO_BCU_CONNECTOR

[env:develop_RP2040_USB]
extends = env:develop_RP2040, RP2040_UPLOAD_USB

[env:develop_RP2040_JLINK]
extends = env:develop_RP2040, UPLOAD_JLINK


[env:release_PiPico_BCU_Connector]
extends = RP2040_custom_releases, RP2040_2MB
build_flags =
  ${RP2040_custom_releases.build_flags}
  ; -D OKNXHW_PIPICO_BCU_CONNECTOR
  -D DEVICE_PIPICO_BCU_CONNECTOR

[env:release_REG1_BASE_V0]
extends = RP2040_custom_releases, RP2040_16MB
build_flags =
  ${RP2040_custom_releases.build_flags}
  ; replace -D OKNXHW_REG1_BASE_V0
  -D DEVICE_REG1_BASE_V0

[env:release_REG1_BASE_V1]
extends = RP2040_custom_releases, RP2040_16MB
build_flags =
  ${RP2040_custom_releases.build_flags}
  ; replace -D OKNXHW_REG1_BASE_V1
  -D DEVICE_REG1_BASE

[env:release_REG2_PIPICO_V1]
extends = RP2040_custom_releases, RP2040_16MB
build_flags =
  ${RP2040_custom_releases.build_flags}
  ; replace -D OKNXHW_REG2_PIPICO_V1
  -D DEVICE_REG2_PIPICO_V1

[env:release_XIAO_MINI_RP2040_V1]
extends = RP2040_custom_releases, RP2040_16MB
build_flags =
  ${RP2040_custom_releases.build_flags}
  -D OKNXHW_OPENKNXIAO_RP2040_MINI_V1

[env:release_SMARTMF_1TE_REG]
extends = RP2040_custom_releases, RP2040_16MB
build_flags =
  ${RP2040_custom_releases.build_flags}
  -D DEVICE_SMARTMF_1TE_REG

; [env:release_UP1]
; extends = RP2040_releases, RP2040_custom, custom_releases
; build_flags =
;    ${RP2040_releases.build_flags}
;    ${RP2040_custom.build_flags}
;    ${custom_releases.build_flags}
;   -D SERIAL_DEBUG=Serial
;   -D OKNXHW_UP1_CONTROLLER2040

; ======== SAMD? ========
; not testet on legacy architecture, no plan to support due to limited resources and high memomry requirement of DFA

; ======== ESP32? ========
; not testet yet


; ESP32
[custom_ESP32]
extends = ESP32, custom
build_flags =
  ${ESP32.build_flags}
  -D SERIAL_DEBUG=Serial
  -D KNX_FLASH_CALLBACK
build_unflags =
  -D LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS

[custom_release_ESP32]
extends = ESP32_releases, custom, custom_ESP32
build_flags =
  ${ESP32_releases.build_flags}
  ${custom.build_flags}
  ${custom_ESP32.build_flags}
  -D OPENKNX_USB_EXCHANGE_IGNORE
  -D OPENKNX_LOOPTIME_WARNING=10


[develop_ESP32]
extends = ESP32_develop, custom_ESP32, custom_develop
build_flags =
  ${ESP32_develop.build_flags}
  ${custom_ESP32.build_flags}
  ${custom_develop.build_flags}
  -D LED_BUILTIN=2
  -D KNX_SERIAL=Serial2
  -D DEVELOPMENT
board_build.partitions = esp_partition.csv

; Release

; Xiao ESP32
[env:release_XIAO_MINI_ESP32_V1]
extends = custom_release_ESP32, ESP32_8MB
build_flags =
   ${custom_release_ESP32.build_flags}
  -I lib/OGM-HardwareConfig/include/
  -D OKNXHW_OPENKNXIAO_ESP32S3_MINI_V1
